properties([ parameters([
  choice( choices: ['build', 'destroy'], description: 'Do you want to build or destroy?', name: 'OPERATION'),
  choice( choices: ['DEV', 'QA'], description: 'Select the environment', name: 'ENVIRONMENT')
]), pipelineTriggers([]) ])

node {
stage('Checkout code') {
checkout([
      $class: 'GitSCM', branches: [[name: '*/terraform']],
      userRemoteConfigs: [[url: 'https://github.com/subeeshr/refinitiv_infra.git']]])
}
stage ('OPERATION') {
withCredentials([[
$class: "AmazonWebServicesCredentialsBinding",
credentialsId: "aws-creds"]]) {
sh '''#!/bin/bash
set -euo pipefail
export PATH=$PATH:/usr/local/bin
if [ "${ENVIRONMENT}" == "DEV" ]; then
  ENV="dev"
  cd env-dev
elif [ "${ENVIRONMENT}" == "QA" ]; then
ENV="qa"
cd env-qa
fi
if [ "${OPERATION}" == "build" ]; then
  ACTION="Building"
  TERRAFORM_COMMAND="apply"
elif [ "${OPERATION}" == "destroy" ]; then
  ACTION="Destroying"
  TERRAFORM_COMMAND="destroy"
else
  echo "ACTION not recognised"
  exit 1
fi

echo "$ACTION $ENV on branch Terraform"
cd ../
rm -fv env-${ENV}/.terraform/terraform.tfstate
chmod 755 setup_remote_state.sh
./setup_remote_state.sh
cd env-${ENV}
terraform ${TERRAFORM_COMMAND} -no-color -auto-approve
'''
if(currentBuild.currentResult == 'SUCCESS') {
slackSend (color: '#00FF00', message: "SUCCESSFUL: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]' (${env.BUILD_URL})")
}
else if ((currentBuild.currentResult == 'FAILURE') && buildChanged){
slackSend (color: '#FF0000', message: "FAILED: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]' (${env.BUILD_URL})")
}
}
}
}
